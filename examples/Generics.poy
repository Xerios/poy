import Foundations { print }

declare fun showType(value: _): Str

extend t[] {
    declare {
        let length: Num
        fun at(index: Num): t
        fun push(value: t): ()
    }

    static fun init(): Self { [] }
}

declare module Math {
    fun min(a: Num, b: Num): Num
}

extend a[] {
    fun zip<b>(bs: b[]): (a, b)[] {
        let len = Math.min(self.length, bs.length)
        mut res = []
        mut i = 0

        while i < len {
            let pair = (self.at(i), bs.at(i))
            res.push(pair)
            i += 1
        }

        res
    }
}

print([1, 2, 3].zip<Str>(["a", "b", "c"]))
print(Num[]::zip<Str>([1, 2, 3], ["a", "b", "c"]))
