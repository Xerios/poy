import Foundations { print, console, Console, ElementType }

declare let showType: _ -> Str

declare module Math {
    fun min(a: Num, b: Num): Num
}

extend<a> a[] {
    declare {
        let length: Num
        fun at(index: Num): a
        fun push(value: a): ()
        fun map<b>(f: a -> b): b[]
    }

    fun reversed(): a[] {
        mut rev = []
        mut i = self.length - 1

        while i >= 0 {
            rev.push(self.at(i))
            i -= 1
        }

        rev
    }

    fun zip<b>(other: b[]): (a, b)[] {
        let len = Math.min(self.length, other.length)
        mut res = []
        mut i = 0

        while i < len {
            res.push((self.at(i), other.at(i)))
            i += 1
        }

        res
    }
}

struct IteratorResult<res> {
    value: res,
    done: Bool,
}

extend<a> a {
    fun print() {
        console.log(self)
        self
    }
}

print([1, 2, 3].zip<Str>(["a", "b", "c"]).reversed())
print(showType(Num[]::reversed))
let ir = IteratorResult<_> { value: "hello", done: false }
print(showType(ir))
ir.print()
[1, 2, 3].print().reversed().print()

