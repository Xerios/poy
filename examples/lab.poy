import Euler

type {
    ReturnType<Function<_, ret>> = ret
    Parameters<Function<args, _>> = args

    IsEmpty<[]> = True
    IsEmpty<_> = False

    Not<True> = False
    Not<False> = True

    Filter<_, []> = []
    Filter<pred, h::tl> = @let<rem, Filter<pred, tl>, @if<@app<pred, h>, h::rem, rem>>
    
    Map<_, []> = []
    Map<pred, h::tl> = @app<pred, h>::Map<pred, tl>

    If<True, @thunk<a>, _> = a
    If<False, _, @thunk<b>> = b
    If<True, a, _> = a
    If<False, _, b> = b

    Force<@thunk<x>> = x

    Loop = Loop

    Inf<x> = x::@thunk<Inf<S<x>>>

    // Query = @if<IsEmpty<[A, B]>, Loop, Yo>
    Query = Filter<@fun<lst, Not<IsEmpty<lst>>>, [[], [A, B], [], [], [C], [D, E], []]>
}

let {
    a = 3 * 7 + 2
    f = n -> n * n
    id = x -> x
}

declare let print: _ -> ()

fun fact(n) {
    if n == 0 { 1 } else { use pred = n - 1 in n * fact(pred) }
}

module A {
    let a = 3
    module B {
        let b = 7
        module C {
            let c = 11
        }
    }
}

declare module Math {
    fun sqrt(x: Num): Num
    let cbrt: Num -> Num
}

let y = use sum = A.a + A.B.b + A.B.C.c in Math.sqrt(fact(sum))
let x = { let x = 3; let y = 7; x * { let x = 11; let y = 17; x + y } - y } + y

fun isPrime(n) {
    if n == 2 { return true }
    if n < 2 || n % 2 == 0 { return false }

    mut i = 3

    while i * i <= n {
        if n % i == 0 {
            return false
        }

        i += 2
    }

    true
}

fun countPrimes(upTo) {
    mut count = if upTo >= 2 { 1 } else { 0 }
    mut i = 3
    
    while i <= upTo {
        if isPrime(i) {
            count += 1
        }

        i += 2
    }

    count
}

print(countPrimes(10 ** 6))
print(Euler.euler1())
