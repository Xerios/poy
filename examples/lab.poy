
type {
    ReturnType<Function<_, ret>> = ret
    Parameters<Function<args, _>> = args

    Fields<Record<fields>> = fields

    Keys<Record<fields>> = KeysAux<fields>
    KeysAux<[]> = []
    KeysAux<(k, _)::tail> = k::KeysAux<tail>

    Values<Record<fields>> = ValuesAux<fields>
    ValuesAux<[]> = []
    ValuesAux<(_, v)::tail> = v::ValuesAux<tail>

    Reverse<lst> = ReverseAux<lst, []>
    ReverseAux<[], rev> = rev
    ReverseAux<h::tl, rev> = ReverseAux<tl, h::rev>

    Unzip<pairs> = UnzipAux<pairs, [], []>
    UnzipAux<[], as, bs> = (Reverse<as>, Reverse<bs>)
    UnzipAux<(a, b)::tail, as, bs> = UnzipAux<tail, a::as, b::bs>

    R = Record<[(Name, Str), (Age, Num), (Pets, Bool)]>
    Query = Unzip<Fields<R>>
}

let {
    a = 3 * 7 + 2
    f = n -> n * n
    id = x -> x
}

declare print: _ -> ()

module Math {
    let fact = n -> if n == 0 { 1 } else { n * fact(n - 1) }
}

module A {
    let a = 3
    module B {
        let b = 7
        module C {
            let c = 11
        }
    }
}

print(use sum = A.a + A.B.b + A.B.C.c in Math.fact(sum))
