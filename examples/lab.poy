
type {
    ReturnType<Function<args, ret>> = ret
    Parameters<Function<args, ret>> = args
    Id<t> = t -> t
    First<head::tail> = head
    First<Tuple<elems>> = First<elems>
    Second<fst::snd::tail> = snd
    Second<Tuple<elems>> = Second<elems>
    ElementType<t[]> = t
    Elements<Tuple<elems>> = elems
    Reversed<Tuple<elems>> = Tuple<Reversed<elems>>
    Reversed<lst> = ReversedAux<lst, []>
    Length<Tuple<elems>> = Length<elems>
    Length<[]> = Zero
    Length<head::tail> = S<Length<tail>>
    At<head::tail, Zero> = head
    At<head::tail, S<n>> = At<tail, n>
    ReversedAux<[], acc> = acc
    ReversedAux<head::tail, acc> = ReversedAux<tail, head::acc>
}

type Query = At<Elements<Reversed<ReturnType<Num -> (Bool, Num, Str)>>>, S<S<Zero>>>

let {
    a = 3 * 7 + 2
    f = n -> n * n
    id = x -> x
}

fun twice(f) {
    x -> f(f(x))
}

fun main() {
    twice(f)(2.11)
}

module B {
    let a = 3
}
