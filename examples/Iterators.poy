import Foundations { print, range, Math }

extend<a> a[] {
    declare {
        let length: Num
        fun at(index: Num): a
        fun push(elem: a): ()
    }

    fun iter() {
        mut i = 0

        while i < self.length {
            yield self.at(i)
            i += 1
        }
    }
}

extend<a> Iterator<a> {
    fun map(f) {
        for v in self {
            yield f(v)
        }
    }

    fun sum() {
        mut total = 0

        for v in self {
            total += v
        }

        total
    }

    fun prod() {
        mut res = 1

        for v in self {
            res *= v
        }

        res
    }

    fun toArray() {
        mut res = []

        for v in self {
            res.push(v)
        }

        res
    }

    fun findIndex(pred: a -> Bool) {
        mut i = 0

        for v in self {
            if pred(v) {
                return i
            }

            i += 1
        }

        -1
    }
}

fun factorial(n) {
    range(2, n + 1).prod()
}

fun solve(a: Num) {
    mut lo = 0
    mut hi = 144
    mut mid = 0
    let eps = 10 ** -12
    let f = x -> x ** x - a

    while (Math.abs(hi - lo) > eps) {
        mid = (lo + hi) / 2

        if f(mid) >= 0 {
            hi = mid
        } else {
            lo = mid
        }
    }

    mid
}

print(use x = solve(5.9722 * 10 ** 24) in (x, x ** x))