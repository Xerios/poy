import Euler { euler1 }
import List { Filter, IsEmpty }

struct Console {
    log: _ -> (),
}

declare let console: Console
let print = console.log

type {
    ReturnType<Function<_, ret>> = ret
    Parameters<Function<args, _>> = args

    Not<True> = False
    Not<False> = True
    
    L = [[], [A, B], [], [], [C], [D, E, F], []]
    Query = Filter<@fun<lst, Not<IsEmpty<lst>>>, L>
}

struct Person {
    name: Str,
    age: Num,
    city: Str,
}

extend Person {
    static fun init(name, age, city) {
        Person { name: name, age: age, city: city }
    }
}

extend Tuple<[]> {
    let isUnit = true
}

extend Tuple<_:_> {
    let isUnit = false
}

extend Person {
    fun canDrive() {
        self.age >= 18
    }
}

let nathalie = Person { name: "Nathalie", age: 25, city: "Paris" }
let nathan = Person("Nathan", 24, "Paris")

let {
    a = 3 * 7 + 2
    f = n -> n * n
    id = x -> x
}

fun fact(n) {
    if n == 0 { 1 } else { use pred = n - 1 in n * fact(pred) }
}

module A {
    let a = 3
    module B {
        let b = 7
        module C {
            let c = 11
        }
    }
}

declare module Math {
    fun sqrt(x: Num): Num
    fun cbrt(x: Num): Num
    fun min(a: Num, b: Num): Num
    fun max(a: Num, b: Num): Num
    fun floor(x: Num): Num
    fun ceil(x: Num): Num
    fun round(x: Num): Num
}

let y = use sum = A.a + A.B.b + A.B.C.c in Math.sqrt(fact(sum))
let x = { let x = 3; let y = 7; x * { let x = 11; let y = 17; x + y } - y } + y

extend Num {
    fun isPrime() {
        if self == 2 { return true }
        if self < 2 || self % 2 == 0 { return false }
        mut i = 3

        while i * i <= self {
            if self % i == 0 {
                return false
            }

            i += 2
        }

        true
    }

    fun sqrt() { Math.sqrt(self) }
    fun floor() { Math.floor(self) }
    fun ceil() { Math.ceil(self) }
    fun round() { Math.round(self) }
}

extend a[] {
    let kind = "any"
}

extend Num[] {
    let kind = "num"
}

extend (_, _) {
    let kind = "any_any"
}

extend (Num, _) {
    let kind = "num_any"
}

extend (_, Num) {
    let kind = "any_num"
}

extend (Str, Num) {
    let kind = "str_num"
}

extend (Bool, Num) {
    let kind = "bool_num"
}

extend () {
    let length = 0
}

extend Tuple<_:_> {
    declare let length: Num
}

extend a[] {
    static fun init(): Self { [] }
    
    declare {
        let length: Num
        fun at(index: Num): a
        fun push(elem: a): ()
        fun pop(): Option<a>
        fun filter(predicate: a -> Bool): a[]
        fun map(f: a -> b): b[]
        fun flatMap(f: a -> b[]): b[]
        fun find(predicate: a -> Bool): Option<a>
        fun forEach(f: a -> ()): ()
        fun slice(start: Num, end: Num): a[]
        fun includes(value: a): Bool
        fun some(predicate: a -> Bool): Bool
        fun every(predicate: a -> Bool): Bool
    }

    fun reverse() {
        mut rev = []
        mut i = self.length - 1

        while i >= 0 {
            rev.push(self.at(i))
            i -= 1
        }

        rev
    }

    fun sum() {
        mut total = 0
        mut i = 0

        while i < self.length {
            total += self.at(i)
            i += 1
        }

        total
    }

    fun isEmpty(): Bool {
        self.length == 0
    }
}

fun range(start: Num, end: Num): Num[] {
    mut rng = []
    mut i = start

    while i < end {
        rng.push(i)
        i += 1
    }

    rng
}

print(range(1, 284000).filter(Num::isPrime).length.sqrt().round().isPrime())
